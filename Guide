Firstly as we have to transfer ERC20 token we have created simple ERC20 smart contract.

*IERC20.sol*
This is a interface file for defining events, functions er are going to use in ERC20 smart contract.
It contain onlt declaration of functions and not implementations.
The "totalSupply" function returns the total supply of tokens.
The "balanceOf" function takes an address as an argument and returns the balance of tokens that address holds.
The "transfer" function takes a destination address and an amount as arguments and transfers that amount of tokens from the sender's account to the destination address. It returns a boolean value indicating whether the transfer was successful.
The "allowance" function takes an owner address and a spender address as arguments and returns the amount of tokens the spender is allowed to spend on behalf of the owner.
The "approve" function takes a spender address and an amount as arguments and allows the spender to spend up to the specified amount of tokens on behalf of the caller.
The "transferFrom" function takes a sender address, a destination address, and an amount as arguments and transfers the specified amount of tokens from the sender's account to the destination address. The function can only be called by a spender who has been approved by the owner of the tokens to spend on their behalf.
The "Transfer" and "Approval" events are triggered when a transfer or approval occurs, respectively. These events can be used to track and audit token transfers and approvals on the blockchain.

*ERC20.sol*
This is a Solidity smart contract that implements the ERC20 token standard. The contract implements the IERC20 interface, which defines a set of functions and events that the contract must implement to be considered an ERC20 token. The contract has a mapping called _balances that maps addresses to token balances, and another mapping called _allowances that maps addresses to the amount of tokens that a spender is allowed to spend on behalf of an owner. The contract also has a private variable called _totalSupply that represents the total supply of tokens. The constructor sets the total supply to 2100000 and assigns all of the tokens to the contract deployer's address.

The totalSupply function returns the total supply of tokens. The balanceOf function takes an address as an argument and returns the balance of tokens for that address. These functions are part of the ERC20 standard.

This is only part of the ERC20 implementation, as there are other functions defined in the IERC20 interface that are not implemented here. Additionally, this contract does not have any functions for transferring tokens or approving token transfers, so it cannot be used to transfer tokens. It serves as a basic template for implementing the ERC20 standard in a Solidity smart contract.

 the _transfer function of the ERC20 token contract. It is an internal function that moves tokens from one address to another. The function first checks that neither the from nor the to address are the zero address, as this is an invalid address.

The _beforeTokenTransfer and _afterTokenTransfer are hooks that are intended to be overridden in child contracts to add custom logic before and after the transfer.

Then, the function checks that the from address has sufficient balance to transfer the specified amount, and if so, subtracts the amount from their balance and adds it to the balance of the to address. The function then emits a Transfer event to signal the successful transfer.

The unchecked keyword is used here to indicate that underflow is not possible, as the balance of from is guaranteed to be greater than or equal to the transfer amount. Finally, _afterTokenTransfer hook is called to allow for additional custom logic.

This is the end of the ERC20 contract code. The contract implements the IERC20 interface and provides basic functions to interact with an ERC20 token. It defines mappings to keep track of token balances and allowances, as well as the total supply of the token. The contract includes functions to transfer tokens, approve token transfers, and transfer tokens from one address to another. Additionally, the contract has functions to mint and burn tokens, which can be used to increase or decrease the token supply. The contract includes internal functions to handle token transfers, allowances, and token events. Finally, there are two empty functions, _beforeTokenTransfer and _afterTokenTransfer, which can be used to execute custom code before and after a token transfer.




